#pragma once
#include<iostream>
#include<string>
using namespace std;

template<class K,class V>
struct BSTreeNode
{
	BSTreeNode<K, V>* _left;
	BSTreeNode<K, V>* _right;
	K _key;
	V _value;

	BSTreeNode(const K& key,const V& value)
		:_left(nullptr)
		,_right(nullptr)
		,_key(key)
		,_value(value)
	{}
};



template<class K, class V>
class BSTree
{
	typedef BSTreeNode<K, V> Node;
public:
	bool Insert(const K& key, const V& value)
	{
		if (_root == nullptr)
		{
			_root = new Node(key, value);
			return true;
		}
		Node* parent = nullptr;
		Node* cur = _root;
		while (cur)
		{
			parent = cur;//由于下面return false，所以这里可以提取出来
			if (cur->_key > key)
				cur = cur->_left;
			else if (cur->_key < key)
				cur = cur->_right;
			else
				return false;
		}
		cur = new Node(key, value);
		if (cur->_key > parent->_key)
			parent->_right = cur;
		else
			parent->_left = cur;

		return true;
	}

	Node* Find(const K& key)
	{
		Node* cur = _root;
		while (cur)
		{
			if (cur->_key > key)
				cur = cur->_left;
			else if (cur->_key < key)
				cur = cur->_right;
			else
				return cur;
		}
		return NULL;
	}
	//bool Erase(const K& key)
	//{
	//	Node* cur = _root;
	//	Node* parent = _root;
	//	while (cur)
	//	{
	//		if (cur->_key > key)
	//		{
	//			parent = cur;
	//			cur = cur->_left;
	//		}
	//		else if(cur->_key<key)
	//		{
	//			parent = cur;
	//			cur=cur->_right
	//		}
	//		else
	//		{
	//			//左为空
	//			if (cur->_left == nullptr)
	//			{
	//				if (cur == parent->_left)
	//					parent->_left = cur->_right;
	//				else if (cur == parent->_right)
	//					parent->_right = cur->_right;
	//				else if (cur == parent)
	//					parent = cur->_right;//被删的是根节点，更新根节点
	//			}
	//			//右为空
	//			else if (cur->_right == nullptr)
	//			{
	//				if (cur == parent->_left)
	//					parent->_left = cur->_left;
	//				else if (cur == parent->_right)
	//					parent->_right = cur->_left;
	//			}
	//			//左右都不为空
	//			else
	//			{
	//				Node* rightMin = cur->_right;
	//				Node* rightMinP = nullptr;
	//				while (rightMin)
	//				{
	//					rightMinP = rightMin;
	//					rightMin = rightMin->_left;
	//				}
	//				swap(rightMin->_key, cur->_key);
	//				//由于找最左，所以parent接右子树
	//				if (rightMinP->_left == rightMin)
	//					rightMinP->_left = rightMin->_right;
	//				else if (rightMinP->_right == rightMin)
	//					rightMinP->_right = rightMin->_right;
	//			}
	//			delete cur;
	//			return true;


	//		}
	//	}
	//	return false;
	//}
	void _InOrder(Node* root)
	{
		if (root == nullptr)
			return;

		_InOrder(root->_left);
		cout << root->_key << ":"<<root->_value<<endl;
		_InOrder(root->_right);

	}
	void InOrder()
	{
		_InOrder(_root);//在类外无法使用_root
		cout << endl;
		return;
	}
private:
	Node* _root = nullptr;
};
/*------------------------------------------------------*/





#define _CRT_SECURE_NO_WARNINGS 1
#include"标头.h"



//单词拼写翻译
void test1()
{
	BSTree <string, string> p;
	p.Insert("牛奶", "milk");
	p.Insert("酸奶", "yogurt");
	p.Insert("羊奶", "ewe's milk");
	p.Insert("羊奶", "ewe's milk");
	p.Insert("羊奶", "ewe's milk");
	p.Insert("奶粉", "milk powder");
	p.InOrder();
	string str;
	while (cin >> str)
	{
		auto ret = p.Find(str);
		if (ret)
			cout << ret->_value << endl;
		else
			cout << "单词拼写错误" << endl;
	}
}
void test2()
{
	string strs[] = { "苹果", "西瓜", "苹果", "樱桃", "苹果", "樱桃", "苹果", "樱桃", "苹果" };
	BSTree<string, int> count;

	for (auto e : strs)
	{
		auto s = count.Find(e);
		if (s == NULL)
		{
			count.Insert(e, 1);
		}
		else
		{
			s->_value++;
		}
	}
	count.InOrder();
}
int main()
{
	test1();
	//test2();


	//测试用例
	BSTree <string, string> m;
	m.Insert("牛奶", "milk");
	m.Insert("羊奶", "ewe's milk");
	//m.Erase("牛奶");
	m.Find("羊奶");
	m.InOrder();
	return 0;
}
