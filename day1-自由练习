#define _CRT_SECURE_NO_WARNINGS 1
#include<iostream>
#include<vector>
using namespace std;

int main()
{
	cout << "   -------------------"<<endl;
	cout << "  |    |    |    |    |" << endl;
	cout << "  | 声 | 趁 | 以 | 借 |" << endl;
	cout << "  |    |    |    |    |" << endl;
	cout << "  | 东 | 火 | 逸 | 刀 |" << endl;
	cout << "  |    |    |    |    |" << endl;
	cout << "  | 击 | 打 | 待 | 杀 |" << endl;
	cout << "  |    |    |    |    |" << endl;
	cout << "  | 西 | 劫 | 劳 | 人 |" << endl;
	cout << "  |    |    |    |    |" << endl;
	cout << "   -------------------" << endl;

	return 0;
}

//累乘
int main()
{
	int i, n, mul;
	i = 1, mul = 1;
	cin >> n;
	while (i <= n)
	{
		mul *= i;
		i++;
	}
	cout << mul;
	return 0;
}
//1- 1/2 + 1/3 - 1/4....=？
int main()
{
	double i = 1;
	int flag = 1;
	double sum = 0;
	int n;
	cin >> n;
	while (n--)
	{
		sum += 1/i*flag;
		i++;
		flag = -flag;
	}
	cout << sum;
	return 0;
}

int main()
{
	main1();

	int n=1;
	vector<int> a;
	while ( n%2==1 )
	{
		cout << "请输入选择的数字：";
		cin >> n;
		a.push_back(n);
		a.push_back(10);
		a.pop_back();
	}
	cout << endl;

	//capacity空间
	a.reserve(10);//只改变capacity
	a.resize(100);//改变capacity和size，size的改变是因为会用字符填充剩余部分，默认字符为: '\0'
	a.resize(5);//收缩size
	a.shrink_to_fit();//收缩capacity
	cout << "size = " << a.size() << endl;
	cout << "capacity = " << a.capacity() << endl;
	cout << "数组是否非空："<<!a.empty() << endl;

	cout << "数组是否递增：";
	int flag = 2;//表示数组递增 或 递减
	for (int i = 0; i <= a.size()-2 ; i++)
	{
		if (a[i] >= a[i + 1])
		{
			cout << "不";
			flag--;
			break;
		}

	}
	cout << "是严格递增" << endl;
	cout << "数组是否严格递减：";
	for (int i = 0; i <= a.size() - 2; i++)
	{
		if (a[i] <= a[i + 1])
		{
			cout << "不";
			flag--;
			break;
		}

	}
	cout << "是严格递减" << endl;
	cout << "数组是否有序：";
	if (flag >= 1)
		cout << "是有序";
	else
		cout << "是无序";




	//access访问
	cout << "nums[]：";
	for (auto e : a)
	{
		cout << e << " ";
	}
	cout << endl<<endl;

	cout << "nums[]：";
	for (int i = 0; i < a.size(); i++)
	{
		cout << a[i] << " ";
	}
	cout << endl<<endl;


	reverse(a.begin(), a.end());
	vector<int>::reverse_iterator it = a.rbegin();
	cout << "nums[]：";
	while (it != a.rend())
	{
		cout << *it << " ";
		it++;
	}
	cout << endl;



	//at使用,抛异常
	//try 
	//{
	//	a[100] = 10;
	//}
	//catch (const exception& e)
	//{
	//	cout << e.what() << endl;
	//}

	//modifiers
	//不同insert的含义？
	auto u = a;
	a.insert(a.begin(), 10);
	a.insert(a.end(), 10, 1);
	//支持一段区间
	a.insert(a.end(),u.begin(),u.end());
	a.insert(a.end(), { 1,2,3 });

	//迭代器失效
	vector<int>::iterator it1 = a.erase(a.end()-1);//注意：a.end()返回的是最后一个元素的下一个位置
	it1 = a.erase(a.begin() + 2, a.end() - 1);//返回区间的首个位置

	auto x = a;
	a.swap(x);

	return 0;
}
