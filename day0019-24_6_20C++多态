一.虚函数表指针（虚表指针）
1.虚函数表本质是一个函数指针数组
2.只要有虚函数，就会有虚函数表指针,且只有一个（除非继承）
3.3.父类与子类会共用虚表，相同类的对象共用一个虚基类
//结构体大小：32位12字节，61位16字节
class Base
{
public:
    
        virtual void Func1()
        {
            cout<<"Func()"<<endl;        
        }
        void Func3()
        {
            cout<<"Func3()"<<endl;
        }
int _b=1;
char _ch='x';
}
4.满足多态   ：指向谁调用谁的虚函数，运行时去虚表中找对应的虚函数调用
5.不满足多态：编译链接根据调用对象，确定调用函数，确定函数地址
二.函数指针数组的定义（优化）
//函数指针
void (*p)();
//函数指针数组
void (*p[10])();


//typedef优化
typedef void(*P)();
//函数指针
P p1;
//函数指针数组
P p2[10];
三.类型强转（进阶版）
- 原理1：只有相关类型才支持类型转化
- 原理2：单参数的构造函数支持隐式
- 原理3：指针可以强转成任意类型（包括自定义类型）
//保留前四个字节，用于以数组形式打印虚函数列表
class Base
{
public:
    
        virtual void Func1()
        {
            cout<<"Func()"<<endl;        
        }
        virtual void Func3()
        {
            cout<<"Func3()"<<endl;
        }
}

typedef void(*VFPTR)();
void Print(VFPTR* vft)
{
    for(size_t i=0;i<2;i++)
    {
        printf("%p->\n",vft[i]);    
    }
}
int main()
{
    Base b;//自定义类型
    
    VFPTR* p= (VFPTR*)(*((int*)&b))//取b的前四个字节作为值，将这个值当作地址传给指针p
    Print(p);
    return 0;
}
