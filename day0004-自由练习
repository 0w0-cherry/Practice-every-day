//1.冒泡-假设法排序
#include<iostream>
using namespace std;
int main1()
{
	int a[10];
	cout << "为数组元素赋值：\n";
	for (int i = 0; i < 10; i++)
	{
		printf("a[%d]=", i);
		scanf("%d", &a[i]);
	}

	//排序
	int flag = 0;//表示数组无序
	int i = 0;
	while (flag == 0)//若数组是无序则排序
	{
		flag = 1;//假设有序，然后检查
		for (int j = 9; j > i; j--)
		{
			if (a[j - 1] > a[j])
			{
				int tmp = a[j];
				a[j] = a[j - 1];
				a[j - 1] = tmp;
				flag = 0;//若交换，则无序
			}
		}
		i++;//迟早有序，因此不担心越界
	}

	for (int i = 0; i < 10; i++)
	{
		cout << a[i] << " ";
	}
	cout << endl;

	return 0;
}

#include<iostream>
using namespace std;
void swap(char& a, char& b)
{
	char tmp =a;
	a = b;
	b = tmp;
}


//2.旋转字符串，KMP
int main2()
{
	char s[] = { "abxsxcdef" };
	int size = sizeof(s) - 2;//计算时注意末尾的 '\0'
	for (int i = 0; i < (5/2); i++)
	{
		swap(s[i], s[4 - i]);
	}
	for (int i = 5; i < size  ; i+=2)
	{
		swap(s[i], s[size + 5 - i]);
	}
	cout << s<<endl;
	for (int i = 0; i < size / 2; i++)
	{
		swap(s[i], s[size - i]);
	}
	cout << s << endl;
	return 0;
}



//3.交换法排序
#include<iostream>
using namespace std;

int main3()
{
	int a[10];
	cout << "为数组元素赋值：" << endl;
	for (int i = 0; i < 10; i++)
	{
		printf("a[%d]=", i);
		scanf("%d", &a[i]);
	}

	for (int i = 0; i < 9; i++)
	{
		for (int j = i + 1; j < 10; j++)
		{
			if (a[i] > a[j])
			{
				int tmp = a[i];
				a[i] = a[j];
				a[j] = tmp;
			}
		}
	}
	for (int i = 0; i < 10; i++)
		cout << a[i] << " ";
	cout << endl;
	return 0;
}

//4.折半排序，优化
#include<iostream>
using namespace std;

void swap(int* a, int* b)
{
    int tmp = *a;
    *a = *b;
    *b = tmp;
}
void Bisearch(int left, int right, int* a) {
    if (left >= right)
        return;

    int i = left, j = right;
    int keyi = left;

    while (i < j) {
        while (a[j] >=a[keyi] && i < j)//找小
            j--;
        while (a[i] <= a[keyi] && i < j)//找大
            i++;
        swap(&a[i], &a[j]);
    }
    swap(&a[keyi],& a[i]);

    keyi = i;
    Bisearch(left, keyi- 1, a);
    Bisearch(keyi + 1, right, a);
}

int main4() {
    cout << "请输入数组元素：" << endl;
    int a[10] = {1,4,7,8,5,2,3,6,9,0};
    for (int i = 0; i < 10; i++) {
        printf("a[%d]=", i);
        scanf("%d", &a[i]);
    }

    Bisearch(0, 9, a);

    for (int i = 0; i < 10; i++) {
        cout << a[i] << " ";
    }


    return 0;
}



//5.优化插入排序（升序）
#include<iostream>
using namespace std;

int main5()
{
	cout << "为数组元素赋值：" << endl;
	int a[10];
	for (int i = 0; i < 10; i++)
	{
		printf("a[%d]=", i);
		scanf("%d", &a[i]);
	}

	//优化，向前比较
	//5 4 3 2 1
	for (int i = 1; i < 10; i++)
	{
		int key = a[i];
		int posi = i - 1;
		while (posi >= 0 && a[posi] > key)
		{
			a[posi + 1] = a[posi];
			posi--;
		}
		a[posi + 1] = key;
	}
	cout << "排序结果如下："<<endl;
	for (int i = 0; i < 10; i++)
	{
		cout << a[i] << " ";
	}
	cout << endl;


	return 0;
}


//6.矩阵旋转
#include<iostream>
using namespace std;

int main6()
{
	int a[2][3];
	int b[3][2];//90°
	int c[2][3];//180°
	int d[3][2];//270°
	for (int i = 0; i < 2; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			printf("a[%d][%d]=", i, j);
			scanf("%d", &a[i][j]);

			b[j][1 - i] = a[i][j];//90°
			c[1-i][2 - j] = a[i][j];//180°
			d[2 - j][i] = a[i][j];//270°
		}
	}
	cout << "输出二维数组：" << endl;
	for (int i = 0; i < 2; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			cout << a[i][j] << "\t";
		}
		cout << endl;
	}
	cout << endl;

	cout << "输出旋转90°后的二维数组：" << endl;
	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 2; j++)
		{
			cout << b[i][j] << "\t";
		}
		cout << endl;
	}
	cout << endl;

	cout << "输出旋转180°后的二维数组：" << endl;
	for (int i = 0; i < 2; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			cout << c[i][j] << "\t";
		}
		cout << endl;
	}
	cout << endl;

	cout << "输出旋转270°后的二维数组：" << endl;
	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 2; j++)
		{
			cout << d[i][j] << "\t";
		}
		cout << endl;
	}
	return 0;
}



