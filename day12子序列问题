https://leetcode.cn/problems/longest-arithmetic-subsequence/

class Solution {
public:
    int longestArithSeqLength(vector<int>& nums) {
        unordered_map<int,int> hash;

        int n=nums.size();
        vector<vector<int>> dp(n,vector<int>(n,2));
        hash[nums[0]]=0;
        int ret=2;
        for(int i=1;i<n;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                int a=2*nums[i]-nums[j];
                if(hash.count(a))
                {
                    dp[i][j]=dp[hash[a]][i]+1;
                }
                ret=max(ret,dp[i][j]);
            }
            hash[nums[i]]=i;
        }
        return ret;

    }
};



https://leetcode.cn/problems/maximum-length-of-pair-chain/
class Solution {
public:
    int findLongestChain(vector<vector<int>>& pairs) {
        sort(pairs.begin(),pairs.end());
        int n=pairs.size();
        vector<int> dp(n,1);

        int ret=1;
        for(int i=1;i<n;i++)
        {
            for(int j=0;j<i;j++)
            {
            if(pairs[j][1]<pairs[i][0])
            {
                dp[i]=max(dp[i],dp[j]+1);
            }
            }
            ret=max(ret,dp[i]);
        }
        return ret;
    }
};



https://leetcode.cn/problems/longest-arithmetic-subsequence-of-given-difference/
class Solution {
public:
    int longestSubsequence(vector<int>& arr, int difference) {
        unordered_map<int,int> hash;

        int ret=1;
        for(int i=0;i<arr.size();i++)
        {
            hash[arr[i]]=hash[arr[i]-difference]+1;
            ret=max(ret,hash[arr[i]]);
        }
        return ret;

    }
};



https://leetcode.cn/problems/Q91FMA/
class Solution {
public:
    int lenLongestFibSubseq(vector<int>& arr) {
        unordered_map<int,int> hash;
        int n=arr.size();
        for(int i=0;i<n;i++)
        {
            hash[arr[i]]=i;
        }

        vector<vector<int>> dp(n,vector<int>(n,2));
        int ret=2;
        for(int j=2;j<n;j++)//固定最后一个位置
        {
            for(int i=1;i<j;i++)//固定倒数第二个位置
            {
                int a=arr[j]-arr[i];
                if(hash.count(a)&& a<arr[i])
                dp[i][j]=max(dp[hash[a]][i]+1,dp[i][j]);
                ret=max(ret,dp[i][j]);
            }
        }
        return ret>2?ret:0;
    }
};
