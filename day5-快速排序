//1.霍尔折半排序+三数取中优化
#include<iostream>
using namespace std;

int GetMidi(int* a, int left, int right)
{
    int mid = (left + right) / 2;
    if (a[left] > a[mid])
    {
        if (a[mid] > a[right])
            return mid;
        else if (a[right] > a[left])
            return left;
        else
            return right;
    }
    else if (a[left] <= a[mid])
    {
        if (a[mid] < a[right])
            return mid;
        else if (a[left] > a[right])
            return left;
        else
            return right;
    }
    return mid;
}


void Bisearch(int left, int right, int* a) {
    if (left >= right)
        return;

    int i = left;//注意起始位置，不能+1
    int j = right;
    int keyi = GetMidi(a, left, right);//索引

    //若不加 '=' ，会死循环
    while (i < j) {
        while (a[j] >= a[keyi] && i < j)//找小，防止越界
            j--;
        while (a[i] <= a[keyi] && i < j)//找大
            i++;
        swap(a[i], a[j]);
    }
    swap(a[keyi], a[i]);

    keyi = i;
    Bisearch(left, keyi - 1, a);
    Bisearch(keyi + 1, right, a);
}
int main() {
    cout << "请输入数组元素：" << endl;
    int a[10] = { 1,4,7,8,5,2,3,6,9,0 };
    //for (int i = 0; i < 10; i++) {
    //    printf("a[%d]=", i);
    //    scanf("%d", &a[i]);
    //}

    Bisearch(0, 9, a);

    for (int i = 0; i < 10; i++) {
        cout << a[i] << " ";
    }


    return 0;
}








//2.双指针法快速排序
#include<iostream>

int GetMid(int* a, int begin, int end)
{
	int mid = (begin + end) / 2;
	if (a[begin] < a[end])
	{
		if (a[mid] < a[begin])
			return begin;
		else if (a[mid] > a[end])
			return end;
		else
			return mid;
	}
	else if(a[begin]>a[end])
	{
		if (a[mid] < a[end])
			return end;
		else if (a[mid] > a[begin])
			return begin;
		else
			return mid;
	}
	return mid;
}


void QuickSort(int* a, int begin, int end)
{
	if (begin >= end)
		return;
	int mid = GetMid(a, begin, end);
	std::swap(a[mid], a[begin]);
	int keyi = begin;
	int prev = begin;
	int cur = begin + 1;
	while (cur <= end)
	{
		if (a[cur] < a[keyi] && ++prev != cur)//注意此处，若prev+1==cur，则prev++但不交换
			std::swap(a[cur], a[prev]);
		cur++;
	}
	//此时prev右边比key大，prev及左边比key小
	std::swap(a[prev], a[keyi]);
	QuickSort(a, begin, prev - 1);
	QuickSort(a, prev + 1, end);

}
int main2()
{
	int arr[] = { 1,4,7,8,5,2,3,6,9 };
	QuickSort(arr, 0, 8);
	for (auto e : arr)
	{
		std::cout << e << " ";
	}
	return 0;
}





//3.挖坑法
#include<iostream>
using namespace std;
void swap(int* a, int* b)
{
	int tmp = *a;
	*a = *b;
	*b = tmp;
}

void quicksort2(int* a, int left, int right)
{
	if (left >= right)
		return;
	int keyi = left;
	int key = a[keyi];
	int begin = left, end = right;
	while (begin < end)
	{
		while (begin < end && a[end] >= a[keyi])
		{
			end--;
		}
		a[keyi] = a[end];
		keyi = end;
		while (begin < end && a[begin] <= a[keyi])
		{
			begin++;
		}
		a[keyi] = a[begin];
		keyi = begin;
	}
	a[keyi] = key;
	quicksort2(a, left, keyi - 1);
	quicksort2(a, keyi + 1, right);

}
int main3()
{
	int arr[] = { 1,4,7,8,5,2,3,6,9 };
	quicksort2(arr, 0, 8);
	for (auto e : arr)
	{
		cout << e << " ";
	}
	return 0;
}




//4.折半查找
#include<iostream>
#include<algorithm>
using namespace std;
//查找数并返回下标
int ErFen(int a[], int key)
{
	int left = 0;
	int right = 8;
	int mid;
	while (left <= right)
	{
		mid = (left + right) / 2;
		if (a[mid] > key)
		{
			right = mid-1;
		}
		else if(a[mid]<key)
		{
			left = mid+1;//防止死循环
		}
		else
		{
			return mid;
		}
	}
	return -1;
}
int main4()
{
	int k = 8;
	//cin>>k;
	int a[9] = { 1,4,7,8,5,2,3,6,9 };
	sort(a, a + 9);
	cout << "排序后的数组：";
	for (int i = 0; i < 9; i++)
		cout << a[i] << " ";
	cout << endl;
	cout << ErFen(a, k);
	return 0;
}
