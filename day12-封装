class Person
{
public:
	void Print()
	{
		cout << "name:" << _name << endl;
		cout << "age:" << _age << endl;
	}
	int x = 10;
protected:
	string _name = "peter"; // 姓名'

// 私房钱
private:
	int _age = 18; // 年龄
};

//    派生类 继承方式  基类
class Student :public Person
{
protected:
	int _sydid;
};
class Teacher : public Person
{
protected:
	int _jobid;
};
int main1()
{
	Student v;
	v.Print();
	return 0;
}


int main2()
{
	int i = 1;
	string s = "1111";//单参数构造函数支持隐式类型转化
	//临时变量具有常性
	const string& s1 = "1111";
	//不相关类型，不支持隐式转换,也不可强转
	//string str = (string)i;
	
	//子类可转化为父类，父类不可转化为子类（仅可公有继承）
	Student a ;//子类
	Person p=a;


	a.Person::x = 100;
	return 0;

}












一.格式
1.将公共元素提取出来，作为父类
2.父类的成员是一个整体的自定义类型成员，不能单独处理,必须将整体全部初始化
3.构造先父后子，析构先子后父。
4.父类先被析构会造成子类访问父类成员为空，因此子类析构后自动调用父类析构
class Person
{
public:
Person(const char*:name)
：_name(name)
{
    cout<<"Person()"<< endl;
}
    void Print()
    {
    cout << "name:" << _name << endl;
    cout << "age:" << _age << endl;
    }
protected:
    string _name = "peter";


private:
    int _age = 18; 
};

//    派生类   继承方式  基类
class Student :public Person
{
public:
    //父类是一个整体，必须整体初始化
       Student(int num,const char* str,const char* name)
           :Person(name)//类似匿名对象，令父类初始化
           ，_num(num)
           ,_str(str)
       {
           ;
       }
protected:
    int _sydid;
 int _num;
 string _str;
};
int main()
{
    Student v;//父类的数据会调用自己的默认构造来初始化
    v.Print();
    return 0;
}

二.数据访问：
1.若数据不想在类外被访问，只能类内访问则调整为 protect/private(可见)
2.不可见指不能在父类外被访问，只能调用父类的函数访问

三.数据继承
1.struct继承方式不写，则默认公有继承，公有访问限定符
2.class继承方式不写，则默认私有，私有访问限定符

四.数据转化
1.不相关类型，不支持隐式转换,也不可强转
2.子类可转化为父类，父类不可转化为子类（仅可公有继承）
五.切割/切片赋值兼容（不产生临时对象）
1.原则：子可给父，父不可给子
class Person
{
    int a;
}
class Student: public Person
{
    int _studid;
}
int main()
{
    Student st;
    Person p=st;
    Person& ref=st;
    Person* ptr=&st;
    
    //父类与派生类相同的数据会同步发生改变，派生类可改父类
    ref.a=10;
    ptr->a=10;
    return 0;
}
六.域
1.类域和命名空间域不影响生命周期
2.同一个域不允许存在同名变量，不同域可以存在同名变量，且访问采取 局部优先，就近原则
3.父类和子类默认选择派生类，屏蔽对父类该元素的直接访问，但可使用域作用访问限定符操作符"::"访问
//域限定访问操作符
class Person
{
    int a;
    void Print()
    {
        ;    
    }
}
class Student: public Person
{
    int _studid;
}
int main()
{
    Student x;
    x.Person::a=10;
    x.Person::Print();
    return 0;
}
七.继承中的作用域
1.在继承体系中基类和派生类都有独立的作用域。
2.子类和父类中有同名成员，子类成员将屏蔽父类对同名成员的直接访问，这种情况叫隐藏,也叫重定义。(在子类成员函数中，可以使用 基类::基类成员 显示访问)
3.需要注意的是如果是成员函数的隐藏，只需要函数名相同就构成隐藏，此外只要是析构就会构成隐藏，除非使用"::"否则无法直接调用
4.函数名相同且在同一个域才构成函数重载

