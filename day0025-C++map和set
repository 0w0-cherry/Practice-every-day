#include<iostream>
#include<map>
using namespace std;

void test_map1()
{
	map<string, string> dict;
	pair<string, string> kv1("sort", "排序");
	dict.insert(kv1);//有名对象
	dict.insert(pair<string, string>("left", "左边"));//匿名对象
	dict.insert(make_pair("right", "右边"));//创建临时的匿名对象
	pair<string, string> kv2 = { "string","字符串" };//隐式类型转换

	map<string,string>::iterator it = dict.begin();
	while (it != dict.end())
	{
		//cout << *it << " ";
		//cout << (*it).first << ":" << (*it).second << endl;
		cout << it->first << ":" << it->second << endl;
		//cout << it.operator->()->first << ":" << it.operator->()->second << endl;
		it++;
	}
	cout << endl;

	for (pair<string,string> kv : dict)
	{
		cout << kv.first << ":" << kv.second << endl;
	}
	cout << endl;
	//std::pair<const std::string,std::string>，一个是std::pair<std::string,std::string>&
	map<string, string> dict2 = { kv1,{"left","左边"},{"right","右边"} };
}


void test2()
{
	string strs[] = { "苹果", "西瓜", "苹果", "樱桃", "苹果", "樱桃", "苹果", "樱桃", "苹果" };
	map<string, int> countMap;
	for (string e : strs)
	{
		map<string, int>::iterator it = countMap.find(e);
		if (it != countMap.end())
		{
			it->second++;
		}
		else
		{
			countMap.insert({ e,1 });//隐式类型转换
		}
	}
}
int main()
{
	test_map1();
	return 0;
}
